pin clone notes

rails new pinclone (maybe add postgresql for project)

add haml to gemfile
add bootstrap sass to gemfile

initialize git
â€¦or create a new repository on the command line

echo "# pinclone" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/atomicwest/pinclone.git
git push -u origin master

â€¦or push an existing repository from the command line

git remote add origin https://github.com/atomicwest/pinclone.git
git push -u origin master

cd into app directory
-------------------------------------------------------------------

edit gemfile; remove commented out gems

add haml, bootstrap-sass, simple_form, then bundle install and restart server

now generate model for pins-> creates timestamped .rb file for the model in db/migrate

run rake db:migrate (got message: [Simple Form] Simple Form is not configured in the application and will use the default values. Use `rails generate simple_form:install` to generate the Simple Form configuration.)

create controller: rails generate controller Pins 

edit pins_controller.rb in app/controllers with index method

edit routes.rb in config folder, make index (from controller) the root route 

create index.html.haml in app/views/pins, put placeholder %h1

add create, new methods in pins_controller.rb

create in app/views/pins new.html.haml, _form.html.haml

in terminal; rails generate simple_form:install --bootstrap 
        (message:   Be sure to have a copy of the Bootstrap stylesheet available on your
  application, you can get it on http://getbootstrap.com/.

  Inside your views, use the 'simple_form_for' with one of the Bootstrap form
  classes, '.form-horizontal' or '.form-inline', as the following:

    = simple_form_for(@user, html: { class: 'form-horizontal' }) do |form|  )
    

in _form.html.haml --> = simple _form _for @pin, html: { multipart: true } do |f| 
    relates to image uploading

after editing _form.html.haml, check http://localhost:3000/pins/new to see basic form

edit pins_controller with save handling

edit application.html.erb, change to application.html.haml in app/views/layouts

add show method in pins_controller.rb

add show.html.haml in app/views/pins

change index.html.haml

define @pins in index method of pins_controller

now add edit and destroy methods to controller (at this point, app index doesn't load, complains of not being able to find DNS )

create edit.html.haml in app/views/pins, add if statement to update method in pins_controller

add link to edit and destroy methods in show.html.haml

add link to new pin in index.html.haml


- - - - - - - - - - - - 
get rid of authentication requirement for git push

generate ssh key with cat command:
$ cat ~/.ssh/id_rsa.pub

create new ssh in github

see repo url: $ git remote show origin
change url: $ git remote set-url origin git+ssh://git@github.com/username/reponame.git
----------------------------
use devise for authentication model
add devise to gem file and bundle install

now $ rails generate devise:install
manually edit files as indicated in prompt (only added 
    default url to config/environment/development.rb
    rails g devise:views)

- - - - - - - - - -
atomicwest:~/workspace/pinclone (master) $ rails generate devise MODEL
Running via Spring preloader in process 3479
      invoke  active_record
      create    db/migrate/20160601112058_devise_create_models.rb
      create    app/models/model.rb
      invoke    test_unit
      create      test/models/model_test.rb
      create      test/fixtures/models.yml
      insert    app/models/model.rb
       route  devise_for :models
- - - - - - - - - -

rails generate devise user

rake db:migrate

restart server

test authentication at https://localhost:3000/users/sign_up


edit app/models/user.rb and app/models/pin.rb to associate the two

run cmd in bash, create another column in database
$ rails generate migration add_user_id_to_pins user_id:integer:index

$ rake db:migrate

test with $ rails console
see the oldest pin with Pin.first; most recent with Pin.last

check users> 
>@pin = Pin.first
>@user = User.first
>@pin.user = @user      
>@pin
>@pin.save

edit show.html.haml to display email;
this only works for the pin that was associated with @pin in rails console (e.g. the oldest pin defined with Pin.first)
error message, complaining about undefined method for nil class when selecting any other pin or creating a new pin

edit pin controller with current_user.pins.build

edit unassociated entries from database in rails console
> @pin = Pin.find(2) or whatever id the  pins that need user entries are
> @user = User.first
> @pin.user = @user
> @pin.save